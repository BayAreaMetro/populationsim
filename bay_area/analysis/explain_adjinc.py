#!/usr/bin/env python3
"""
Explain what ADJINC is and why it's essential for proper income conversion
"""

def explain_adjinc():
    """Detailed explanation of ADJINC and its purpose"""
    
    print("=" * 80)
    print("WHAT IS ADJINC? - The Census Income Adjustment Factor")
    print("=" * 80)
    print()
    
    print("üè¶ THE PROBLEM ADJINC SOLVES:")
    print("-" * 35)
    print()
    print("Census PUMS data is collected over multiple years (e.g., 2018-2022 for ACS 2022).")
    print("A household surveyed in 2018 reported their 2018 income.")
    print("A household surveyed in 2022 reported their 2022 income.")
    print("You can't directly compare $50,000 from 2018 vs $50,000 from 2022!")
    print()
    
    print("üí° WHAT ADJINC DOES:")
    print("-" * 20)
    print()
    print("ADJINC converts ALL income values to the SAME reference year (typically 2021).")
    print()
    print("Formula: Adjusted Income = (ADJINC √∑ 1,000,000) √ó Raw Income")
    print()
    print("ADJINC is stored as an integer with 6 implied decimal places:")
    print("- ADJINC = 1,085,308 means factor = 1.085308")
    print("- ADJINC = 1,019,518 means factor = 1.019518")
    print()
    
    print("üìä CONCRETE EXAMPLE:")
    print("-" * 22)
    print()
    print("Household A surveyed in 2018:")
    print("- Raw HINCP: $80,000 (2018 dollars)")
    print("- ADJINC: 1,207,712 (factor = 1.207712)")
    print("- Adjusted income: $80,000 √ó 1.207712 = $96,617 (2021 dollars)")
    print()
    print("Household B surveyed in 2022:")
    print("- Raw HINCP: $90,000 (2022 dollars)")
    print("- ADJINC: 1,019,518 (factor = 1.019518)")  
    print("- Adjusted income: $90,000 √ó 1.019518 = $91,757 (2021 dollars)")
    print()
    print("Now we can properly compare: $96,617 vs $91,757 (both in 2021 dollars)")
    print()
    
    print("üéØ WHY THIS MATTERS FOR POPULATIONSIM:")
    print("-" * 40)
    print()
    print("Without ADJINC adjustment:")
    print("‚ùå We'd be mixing 2018$, 2019$, 2020$, 2021$, 2022$ values")
    print("‚ùå Income distributions would be completely wrong")
    print("‚ùå Vehicle ownership models depend on accurate income")
    print("‚ùå Low-income households would be over-counted (older survey years)")
    print()
    print("With proper ADJINC adjustment:")
    print("‚úÖ All incomes converted to consistent reference year")
    print("‚úÖ Accurate income distributions for modeling")
    print("‚úÖ Proper vehicle ownership patterns")
    print("‚úÖ Valid comparisons with ACS published estimates")
    print()
    
    print("üîç WHAT WE DISCOVERED:")
    print("-" * 25)
    print()
    print("Our current seed data:")
    print("- Raw HINCP median: $128,200")
    print("- Current hh_income_2023: $128,200 (‚ùå NO ADJINC applied!)")
    print("- Current hh_income_2010: $90,177 (‚ùå Just currency conversion!)")
    print()
    print("With proper ADJINC:")
    print("- Should be hh_income_2023: ~$165,524 (‚úÖ ADJINC + CPI)")
    print("- Should be hh_income_2010: ~$116,431 (‚úÖ ADJINC + CPI)")
    print()
    
    print("üìà THE IMPACT:")
    print("-" * 15)
    print()
    print("Current (wrong): 16.2% of households under $30k (2010$)")
    print("With ADJINC fix: ~12-13% of households under $30k (2010$)")
    print()
    print("Vehicle impact:")
    print("- Low-income households have ~60% zero-vehicle rate")
    print("- Reducing low-income by 3-4% should reduce zero-vehicle by ~2-2.5%")  
    print("- Current: 16.1% zero-vehicle ‚Üí Expected after fix: ~13.5-14%")
    print("- ACS target: ~10.2% zero-vehicle")
    print()
    print("So ADJINC fix should be a major improvement, but may not solve everything.")
    print()
    
    print("üõ†Ô∏è BOTTOM LINE:")
    print("-" * 16)
    print()
    print("ADJINC is absolutely essential for any analysis using PUMS income data.")
    print("Our current seed population is using RAW survey-year incomes,")
    print("which is why we have too many 'low-income' households and too many")
    print("zero-vehicle households. We MUST regenerate with proper ADJINC.")

if __name__ == "__main__":
    explain_adjinc()
